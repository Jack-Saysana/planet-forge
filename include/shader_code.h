const char *vertex_shader =
"#version 430 core\n"
"layout (location = 0) in vec3 in_pos;\n"
"layout (location = 0) in vec3 in_norm;\n"
"layout (location = 0) in vec2 in_tex_coord;\n"
"uniform mat4 model;\n"
"uniform mat4 view;\n"
"uniform mat4 proj;\n"
""
"out vec3 frag_norm;\n"
"out vec3 frag_pos;\n"
""
"void main() {\n"
"  gl_Position = proj * view * model * vec4(in_pos, 1.0);\n"
"  gl_PointSize = 1.0;\n"
"  frag_norm = in_norm;\n"
"  frag_pos = vec3(model * vec4(in_pos, 1.0));\n"
"}\n";

const char *fragment_shader =
"#version 430 core\n"
"out vec4 FragColor;\n"
"in vec3 frag_norm;\n"
"in vec3 frag_pos;\n"
""
"uniform vec3 light_pos;"
"void main() {\n"
"  float ambient = 0.25;\n"
""
"  vec3 norm = normalize(frag_norm);\n"
"  vec3 light_dir = normalize(light_pos - frag_pos);\n"
"  float diff = max(dot(light_dir, norm), 0.0);\n"
""
"  vec3 res = (diff + ambient) * vec3(0.0, 1.0, 0.0);\n"
"  FragColor = vec4(res, 1.0);\n"
"}\n";

const char *fragment_shader_atmosphere =
"#version 430 core\n"
"out vec4 FragColor;\n"
"in vec3 frag_norm;\n"
"in vec3 frag_pos;\n"
""
"uniform vec3 light_pos;\n"
"uniform vec3 planet_pos;\n"
"uniform vec3 view_pos;\n"
""
"float calc_lighting();\n"
"vec3 calc_color();\n"
""
"void main() {\n"
"  float lighting = calc_lighting();\n"
"  //lighting = 1.0;\n"
"  vec3 color = calc_color();\n"
"  vec3 res = lighting * color;\n"
"  FragColor = vec4(res, 0.75);\n"
"}\n"
""
"float calc_lighting() {\n"
"  float ambient = 0.1;\n"
""
"  vec3 norm = normalize(frag_norm);\n"
"  vec3 light_dir = normalize(light_pos - frag_pos);\n"
"  float diff = max(dot(light_dir, norm), 0.0);\n"
""
"  return diff + ambient;\n"
"}\n"
""
"vec3 calc_color() {\n"
"  vec3 norm = normalize(view_pos - planet_pos);\n"
"  vec3 light_dir = normalize(light_pos - view_pos);\n"
"  float diff = 0.25 + max(dot(light_dir, norm), 0.0);\n"
""
"  vec3 cam_dir = normalize(view_pos - planet_pos);\n"
"  vec3 to_atmos = normalize(frag_pos - view_pos);\n"
"  float val = max(dot(cam_dir, to_atmos), -diff);\n"
"  val = min(val + diff, 1.0);\n"
"  vec3 col = (val * vec3(0.0117, 0.8745, 0.9882)) +\n"
"             ((1.0 - val) * vec3(1.0, 0.6392, 0.2313));\n"
"  return col;\n"
"}\n"
;
