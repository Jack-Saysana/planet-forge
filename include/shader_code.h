 const char *vertex_shader =
"#version 430 core\n"
"layout (location = 0) in vec3 in_pos;\n"
"layout (location = 1) in vec3 in_norm;\n"
"layout (location = 2) in vec3 in_tangent;\n"
"layout (location = 3) in vec3 in_bitangent;\n"
"layout (location = 4) in vec2 in_tex_coord;\n"
"uniform mat4 model;\n"
"uniform mat4 view;\n"
"uniform mat4 proj;\n"
"out vec3 frag_norm;\n"
"out vec3 frag_pos;\n"
"out mat4 view_mat;\n"
"out vec2 tex_coords;\n"
"out vec3 tangent;\n"
"out vec3 bitangent;\n"
"void main() {\n"
"  gl_Position = proj * view * model * vec4(in_pos, 1.0);\n"
"  gl_PointSize = 1.0;\n"
"  frag_norm = mat3(transpose(inverse(model))) * in_norm;\n"
"  frag_pos = vec3(model * vec4(in_pos, 1.0));\n"
"  view_mat = view;\n"
"  tex_coords = in_tex_coord;\n"
"  tangent = mat3(transpose(inverse(model))) * in_tangent;\n"
"  bitangent = mat3(transpose(inverse(model))) * in_bitangent;\n"
"}\n";

const char *vertex_shader_norm =
"#version 430 core\n"
"layout (location = 0) in vec3 in_pos;\n"
"layout (location = 1) in vec3 in_norm;\n"
"layout (location = 2) in vec3 in_tangent;\n"
"layout (location = 3) in vec3 in_bitangent;\n"
"layout (location = 4) in vec2 in_tex_coord;\n"
"uniform mat4 model;\n"
"uniform mat4 view;\n"
"out VS_OUT {\n"
"  vec3 tangent;\n"
"  vec3 bitangent;\n"
"  vec3 normal;\n"
"} vs_out;\n"
"void main() {\n"
"  gl_Position = view * model * vec4(in_pos, 1.0);\n"
"  mat3 n_mat = mat3(transpose(inverse(view * model)));\n"
"  vs_out.normal = n_mat * in_norm;\n"
"  vs_out.tangent = n_mat * in_tangent;\n"
"  vs_out.bitangent = n_mat * in_bitangent;\n"
"}\n";

const char *geom_shader =
"#version 430 core\n"
"layout (triangles) in;\n"
"layout (line_strip, max_vertices = 6) out;\n"
"in VS_OUT {\n"
"  vec3 tangent;\n"
"  vec3 bitangent;\n"
"  vec3 normal;\n"
"} gs_in[];\n"
""
"uniform mat4 proj;\n"
""
"void main() {\n"
"  vec3 intermediate = vec3(gl_in[0].gl_Position + gl_in[1].gl_Position + gl_in[2].gl_Position);\n"
"  intermediate *= 0.3333;\n"
"  gl_Position = proj * vec4(intermediate, 1.0);\n"
"  EmitVertex();\n"
"  gl_Position = proj * (vec4(intermediate, 1.0) + (0.05 * vec4(gs_in[0].normal, 1.0)));\n"
"  EmitVertex();\n"
""
"  gl_Position = proj * vec4(intermediate, 1.0);\n"
"  EmitVertex();\n"
"  gl_Position = proj * (vec4(intermediate, 1.0) + (0.01 * vec4(gs_in[0].bitangent, 1.0)));\n"
"  EmitVertex();\n"
""
"  gl_Position = proj * vec4(intermediate, 1.0);\n"
"  EmitVertex();\n"
"  gl_Position = proj * (vec4(intermediate, 1.0) + (0.005 * vec4(gs_in[0].tangent, 1.0)));\n"
"  EmitVertex();\n"
"  EndPrimitive();\n"
"}\n";

const char *frag_shader_norm =
"#version 430 core\n"
"out vec4 FragColor;\n"
"void main() {\n"
"  FragColor = vec4(1.0, 1.0, 0.0, 1.0);\n"
"}\n";

const char *fragment_shader =
"#version 430 core\n"
"out vec4 FragColor;\n"
"in vec3 frag_norm;\n"
"in vec3 frag_pos;\n"
"uniform vec3 light_pos;\n"
"uniform vec3 sphere_center;\n"
"uniform vec3 camera_position;\n"
"uniform float radius;\n"
""
"vec4 shadow(vec3 norm, vec4 frag_col) {\n"
"  float ambient_str = 0.05;\n"
"  vec3 ambient = ambient_str * vec3(frag_col);\n"
"  float spec_strength = 0.5;\n"
"  vec3 light_dir = normalize(light_pos - frag_pos);\n"
"  vec3 view_dir = normalize(camera_position - frag_pos);\n"
"  vec3 diffuse = vec3(frag_col) * max(dot(light_dir, norm), 0.0);\n"
"  vec3 reflection_dir = reflect(-light_dir, norm);\n"
"  float spec = pow(max(dot(view_dir, reflection_dir), 0.0), 1) *\n"
"               min(3.0 * max(dot(view_dir, norm), 0.0), 1.0) * spec_strength;\n"
"  vec3 specular = spec * vec3(frag_col);\n"
"  return vec4(ambient + diffuse + specular, 1.0);\n"
"}\n"
""
"float dist_from_center() {\n"
"  return distance(frag_pos, sphere_center);\n"
"}\n"
""
"void main() {\n"
"  vec3 br = vec3(0.392, 0.349, 0.325);\n"
"  vec3 sand = vec3(246 / 255, 215 / 255, 176 / 255);\n"
"  vec3 g = vec3(0.0, 1.0, 0.0);\n"
"  vec3 b = vec3(0.0, 0.0, 1.0);\n"
"  vec3 w = vec3(1.0, 1.0, 1.0);\n"
"  float dist = dist_from_center();\n"
"  if (dist > 0.0 && dist < 1.025 * radius) {\n"
"    FragColor = vec4(mix(sand, g, (dist - radius) / (0.025 * radius)), 1.0);\n"
"  } else if (dist >= 1.025 * radius && dist < radius * 1.10) {\n"
"    FragColor = vec4(mix(g, br, (dist - (radius * 1.025)) / (radius * 0.075)), 1.0);\n"
"  } else if (dist >= 1.10 * radius && dist < 1.25 * radius) {\n"
"    FragColor = vec4(mix(br, w, (dist - (radius * 1.1)) / (radius * 0.15)), 1.0);\n"
"  } else {\n"
"    FragColor = vec4(w, 1.0);\n"
"  }\n"
"  FragColor = shadow(normalize(frag_norm), FragColor);\n"
"}\n";

const char *frag_ocean_shader =
"#version 430 core\n"
"#define PI 3.14159\n"
"out vec4 FragColor;\n"
"in vec3 frag_norm;\n"
"in vec3 frag_pos;\n"
"in vec2 tex_coords;\n" 
"in vec3 tangent;\n"
"in vec3 bitangent;\n"
"in mat3 model_mat;\n"
"uniform vec3 light_pos;\n"
"uniform float time;\n"
"uniform vec3 camera_position;\n"
"uniform sampler2D norm_tex;\n"
"vec4 shadow(vec3 norm, vec4 frag_col) {\n"
"  float ambient_str = 0.05;\n"
"  vec3 ambient = ambient_str * vec3(frag_col);\n"
"  float spec_strength = 0.9;\n"
"  vec3 light_dir = normalize(light_pos - frag_pos);\n"
"  vec3 view_dir = normalize(camera_position - frag_pos);\n"
"  vec3 diffuse = vec3(frag_col) * max(dot(light_dir, norm), 0.0);\n"
"  vec3 reflection_dir = reflect(-light_dir, norm);\n"
"  float spec = pow(max(dot(view_dir, reflection_dir), 0.0), 32) *\n"
"               min(3.0 * max(dot(view_dir, norm), 0.0), 1.0) * spec_strength;\n"
"  vec3 specular = spec * vec3(1.0);\n"
"  return vec4(ambient + diffuse + specular, 1.0);\n"
"}\n"
""
"float clamp_fl(float i) {\n"
"  return 0.5 * (i + 1.0);\n"
"}\n"
""
"void main() {\n"
"  mat3 TBN = mat3(tangent, bitangent, frag_norm);\n"
"  float xper = 0.0;\n"
"  float yper = 0.0;\n"
"  float a = 0.15;\n"
"  float b = 0.05;\n"
"  float n = (sin((tex_coords.y / b) + time) + sin((tex_coords.x / b) + time))/2.0;\n"
"  xper = \n"
"         a * (((sin(((PI * tex_coords.x) / b) + time) + n) * \n"
"         (sin(sin(time + ((tex_coords.x * tex_coords.y) / b))))));\n"
"  yper = 0.0;\n"
"  xper = clamp(xper, yper, 1.0);\n"
"  yper = xper;\n"
"  vec3 t = normalize(vec3(xper, yper, 1.0));\n"
"  vec3 new_normal = normalize(TBN * t);\n"
"  FragColor = vec4(0.0, 0.0, 1.0, 1.0);\n"
"  FragColor = vec4(vec3(shadow(normalize(new_normal), FragColor)), 0.75);\n"
"}\n";

const char *frag_sun_shader =
"#version 430 core\n"
"out vec4 FragColor;\n"
"in vec3 frag_pos;\n"
"in vec3 frag_norm;\n"
"void main() {\n"
"  FragColor = vec4(1.0, 1.0, 1.0, 1.0);\n"
"}\n";
